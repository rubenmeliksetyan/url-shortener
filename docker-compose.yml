version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend_service
    volumes:
      - ./backend:/usr/src/app
    env_file:
      - ./backend/.env
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    command: npm run start:dev

  db:
    image: postgres:15-alpine
    container_name: postgres_db
    env_file:
      - ./backend/.env
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -h ${DATABASE_HOST}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    restart: unless-stopped
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend_service
    ports:
      - "85:80"
    depends_on:
      - backend
    networks:
      - app-network
    environment:
      - VITE_API_URL=${VITE_API_URL}

networks:
  app-network:
    driver: bridge

volumes:
  pgdata: